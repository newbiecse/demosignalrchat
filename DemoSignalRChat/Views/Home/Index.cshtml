@{
    ViewBag.Title = "Home Page";
}
@using DemoSignalRChat.ViewModels
@model UserViewModel

Link:
<input id="status-link" />


<hr />

<h2>Chat - @Model.UserName <input type="button" value="new chat" id="new-chat" />  <input type="button" value="Turn Off Chat" id="turn-off-chat" /> </h2>
<div class="container">
    <div class="col-md-10">
        <div class="row">
            <input type="text" id="message" />
            <input type="button" id="sendmessage" value="Send" />
            <ul id="discussion"></ul>
        </div>

        <hr />

        <div class="row">
            UserId: <input type="text" id="txt_userId" /><br />

            Message: <input type="text" id="txt_prvmessage" />
            <input type="button" id="send_prvmessage" value="Send private message" />
            <ul id="private_discussion"></ul><!--\#private_discussion-->
        </div>
    </div>
    <div class="col-md-2">
        @Html.Partial("_FriendList", (List<UserViewModel>)ViewBag.FriendList)
    </div>

        <div id="list-chat">
        </div>
</div>

@section scripts {
    <!--Script references. -->
    <!--The jQuery library is required and is referenced by default in _Layout.cshtml. -->
    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-2.0.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>
    <!--SignalR script to update the chat page and send messages.-->

    <script src="~/Scripts/myScripts/replaceURLWithHTMLLinks.js"></script>
    <script src="~/Scripts/myScripts/replaceEmotion.js"></script>



    <script>
        var userName = '@Model.UserName';
        var curUserId = '@Model.UserId';

        //alert(userName);

        $(function () {
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call back to display messages.
            chat.client.messageReceived = function (userName, message) {
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + htmlEncode(userName)
                    + '</strong>: ' + htmlEncode(message) + '</li>');
            };



            /*
            *   Notify online
            */
            chat.client.onNewUserConnected = function (userIdConnected) {
                $("#" + userIdConnected).css("background-color", "red");
                $("#" + userIdConnected).attr('data-isonline', 1);
            }

            chat.client.onConnected = function (listFriendId) {
                if (listFriendId.length > 0) {

                    var isOnline = ($("#" + listFriendId[0]).attr('data-isonline') == 0) ? 0 : 1;

                    //alert(isOnline);

                    var color = (isOnline == 1) ? "red" : "white";

                    for (i = 0; i < listFriendId.length; i++) {
                        $("#" + listFriendId[i]).css("background-color", color).attr('data-isonline', isOnline);
                    }
                }
            }

            /*
            *   Notify offline
            */
            chat.client.offLine = function (userIdOffLine) {
                $("#" + userIdOffLine).css("background-color", "#ffffff");
            }


            /*
            *   singout
            */
            chat.client.signOut = function (userIdSignOut) {
                $("#" + userIdSignOut).css("background-color", "#ffffff");
            }

            /*
            *   A sent message to B
            *   display message B side
            *   => need: A_userId(user sent)
            *           b1: check exist window chat B -> A
            *           b2: update window chat have id = 'w-A_userId'
            */
            chat.client.privateMessageReceived = function (userIdSent, message) {

                var _B_windowId = "#w-" + userIdSent;
                var _B_windowBodyId = "#w-b-" + userIdSent;

                if ($(_B_windowBodyId).length == 0) {
                    //it doesn't exist
                    $("#" + userIdSent).click();
                }

                // Add the message to the window body
                var msg_resolved = replaceEmotion(replaceURLWithHTMLLinks(message));

                $(_B_windowBodyId).append("<p class='msg msg-friend'>" + msg_resolved + "</p>");
                // scroll window body
                $(_B_windowBodyId).scrollTop($(_B_wBodyId).height());

            };


            // Start the connection.
            $.connection.hub.start().done(function () {

                chat.server.connect(curUserId);

                $("#turn-off-chat").click(function () {
                    chat.server.turnOffChat();
                });

                $('#sendmessage').click(function () {

                    // Call the Send method on the hub.
                    chat.server.sendMessageToAll(userName, $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });


                $("#btn-logOff").click(function () {
                    chat.server.onDisconnected();
                });

                $('body').on('keyup', '.txt-message', function (e) {
                    if ($(this).val().length > 0 && e.keyCode == 13) {

                        /*
                        *   call method at server side
                        *   logic
                        *   add to database
                        */
                        var _friendId = $(this).attr("data-friendId");
                        var _msg = $(this).val();
                        chat.server.sendPrivateMessage(_friendId, _msg);

                        /*
                        *   display on current user
                        */
                        var msg_link = replaceURLWithHTMLLinks(_msg);
                        var msg_emotion = replaceEmotion(msg_link);


                        $("#w-b-" + _friendId).append("<p class='msg msg-curent-user'>" + msg_emotion + "</p>");
                        // scroll window body
                        $("#w-b-" + _friendId).scrollTop($("#w-b-" + _friendId).height());
                        // clear input
                        $(this).val('').focus();
                    }// end if
                });// end on txt-message keyup


            });
        });
        // This optional function html-encodes messages for display in the page.
        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }
    </script>


    <script>
        $(".friend-chat").click(function () {

            var friendId = $(this).attr("id");
            var friendName = $(this).attr("data-userName");
            var windowId = "w-" + friendId;
            var wBodyId = "w-b-" + friendId;

            if ($("#" + windowId).length == 0) {
                //it doesn't exist
            

            var strNewWindowChat =
                  "<div class='window-chat'" + "id='" + windowId + "'>"
                + "    <div class='window-chat-header'>"
                + "        <p>" + friendName + "</p>"
                + "    </div>"
                + "    <div class='window-chat-body' id='" + wBodyId + "'>"
                + "    </div>"
                + "    <div class='window-chat-footer'>"
                + "        <input type='text' placeholder='Enter message...' class='txt-message' data-friendId='" + friendId + "' />"
                + "    </div>"
                + "</div>";

            $("#list-chat").append(strNewWindowChat);
            } // end doesn't exist

            else {
                alert("Already existing :)");
            }
        });//end click
    </script>





}
